const userData = {
  USD: 1000,
  EUR: 900,
  UAH: 15000,
  BIF: 20000,
  AOA: 100,
};

const bankData = {
  USD: {
    max: 3000,
    min: 100,
    img: "üíµ",
  },
  EUR: {
    max: 1000,
    min: 50,
    img: "üí∂",
  },
  UAH: {
    max: 0,
    min: 0,
    img: "üí¥",
  },
  GBP: {
    max: 10000,
    min: 100,
    img: "üí∑",
  },
};

const getMoney = () => {
  return new Promise(function (resolve, reject) {
    let userPromptBalanse = prompt("–ü–æ–¥–∏–≤–∏—Ç–∏—Å—è –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ñ? —Ç–∞–∫/–Ω—ñ"); //—Ç–∞–∫
    userPromptBalanse.toLowerCase() === "—Ç–∞–∫"
      ? resolve(userData)
      : reject(userData, bankData);
  });
};

function getUserBalance(userDataInformation) {
  const userCashTypes = Object.keys(userDataInformation);
  const cashType = prompt(
    `–í–≤–µ–¥—ñ—Ç—å –≤–∞–ª—é—Ç—É –∑–∞ —è–∫–æ—é –±—É–¥–µ –≤–∏–≤–µ–¥–µ–Ω–æ –±–∞–ª–∞–Ω—Å.  –î–æ—Å—Ç—É–ø–Ω—ñ –≤–∞–ª—é—Ç–∏: ${userCashTypes.join(", ")}`);

  if (cashType === null) {
    const continueOrTakeCash = prompt('–î–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ –≤–∞–ª—é—Ç—É. –ë–∞–∂–∞—î—Ç–µ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å –±–∞–ª–∞–Ω—Å? ');
    return continueOrTakeCash === '—Ç–∞–∫' ? getUserBalance(userDataInformation) : Promise.reject('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–º–æ–≤–∏–≤—Å—è –≤—ñ–¥ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å—É')
  } else if (!userCashTypes.includes(cashType)) {
    console.log("–í–≤–µ–¥–µ–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—É –≤–∞–ª—é—Ç—É, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
    return getUserBalance(userDataInformation);
  } else {
    console.log(
      `–ë–∞–ª–∞–Ω—Å —Å—Ç–∞–Ω–æ–≤–∏—Ç—å: ${userDataInformation[cashType]} ${cashType}`
    );
    const whatNextToDo = prompt('–ë–∞–∂–∞—î—Ç–µ –∑–Ω—è—Ç–∏ –∫–æ—à—Ç–∏ (—Ç–∞–∫/–Ω—ñ)?');
    return whatNextToDo === '—Ç–∞–∫'? getUserCurrency(userData, bankData) : Promise.reject('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–≤–µ—Ä—à–∏–≤ –æ–ø–µ—Ä–∞—Ü—ñ—ó')
  }
}

function getUserCurrency(userDataInfo, bankDataInfo) {
  return new Promise(function (resolve, reject) {
    const availableUserCash = Object.keys(userDataInfo);
    const availableBankCash = availableUserCash.filter(
      (currency) => bankDataInfo[currency]?.max > 0
    );
    const userWantToTake = prompt(
      `–í–≤–µ–¥—ñ—Ç—å –≤–∞–ª—é—Ç—É, –∑–∞ —è–∫–æ—é –±—É–¥–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–µ –∑–Ω—è—Ç—Ç—è. –î–æ—Å—Ç—É–ø–Ω—ñ –≤–∞–ª—é—Ç–∏: ${availableBankCash}`
    );

    if (availableBankCash.includes(userWantToTake)) {
      return resolve(userWantToTake)
    } else if (userWantToTake === null) {
      const whatNext = prompt('–î–ª—è –∑–Ω—è—Ç—Ç—è –∫–æ—à—Ç—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ –≤–∞–ª—é—Ç—É, –±–∞–∂–∞—î—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ (—Ç–∞–∫/ –Ω—ñ)?');
      return whatNext === '—Ç–∞–∫' ? getUserCurrency(userDataInfo, bankDataInfo) : reject("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–º–æ–≤–∏–≤—Å—è –≤—ñ–¥ –∑–Ω—è—Ç—Ç—è –∫–æ—à—Ç—ñ–≤")
    } else {
      console.log("–í–≤–µ–¥–µ–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—É –≤–∞–ª—é—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑");
      getUserCurrency(userDataInfo, bankDataInfo);
    }
  });
}

function getUserCash(userDataInfo, bankDataInfo, currency) {
return new Promise(function(resolve) {
  const maxAvailableBankCash = Math.min(bankDataInfo[currency]?.max, userDataInfo[currency]);
  const minAvailableBankCash = bankDataInfo[currency]?.min;
  const userWantToTake = parseInt(prompt(
    `–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –∑–Ω—è—Ç—Ç—è. –î–æ—Å—Ç—É–ø–Ω–∞ —Å—É–º–∞ –≤—ñ–¥ ${minAvailableBankCash} –¥–æ ${maxAvailableBankCash} ${currency}`
  ));

  if (userWantToTake >= minAvailableBankCash && userWantToTake <= maxAvailableBankCash) {
    console.log(`–û—Ç –í–∞—à—ñ –≥—Ä–æ—à—ñ ${userWantToTake} ${currency} ${bankDataInfo[currency].img}`);
    resolve(userDataInfo);
  } else if (userWantToTake < minAvailableBankCash) {
    console.log(`–í–≤–µ–¥–µ–Ω–∞ —Å—É–º–∞ –º–µ–Ω—à–∞ –∑–∞ –¥–æ—Å—Ç—É–ø–Ω—É. –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –∑–Ω—è—Ç—Ç—è: ${minAvailableBankCash} ${currency}`);
    getUserCash(userDataInfo, bankDataInfo, currency);
  }else if (userWantToTake > maxAvailableBankCash) {
    console.log(`–í–≤–µ–¥–µ–Ω–∞ —Å—É–º–∞ –±—ñ–ª—å—à–∞ –∑–∞ –¥–æ—Å—Ç—É–ø–Ω—É. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –∑–Ω—è—Ç—Ç—è: ${maxAvailableBankCash} ${currency}`);
    getUserCash(userDataInfo, bankDataInfo, currency);
  }
})
}

getMoney()
  .then(
  function (data) {
    return getUserBalance(data);
  },
  function () {
    return getUserCurrency(userData, bankData);
  }
  )
  .then(
    function (data) {
      return getUserCash(userData, bankData, data);
    }
  )
  .catch(
    function (error) {
      console.log(error);
    }
  )
  .finally(
    function () {
      console.log('–î—è–∫—É—é, –≥–∞—Ä–Ω–æ–≥–æ –¥–Ω—è üòä');
    }
  )
